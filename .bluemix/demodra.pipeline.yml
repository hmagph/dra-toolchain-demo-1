---
stages:
- name: BUILD
  inputs:
  - type: git
    branch: master
    service: ${DEMODRA_API_REPO}
  triggers:
  - type: commit
  properties:
  - name: LOGICAL_APP_NAME
    value: ${CF_APP_NAME}
    type: text
  - name: LOGICAL_ENV_NAME
    value: master
    type: text
  - name: BUILD_PREFIX
    value: master
    type: text
  jobs:
  - name: Build
    type: builder
    artifact_dir: ''
    build_type: shell
    script: |-
      #!/bin/bash
      export PATH=/opt/IBM/node-v4.2/bin:$PATH
      npm install
      grunt dev-setup --no-color
  - name: Unit Test and Code Coverage
    type: tester
    extension_id: ibm.devops.services.pipeline.dra_upload_results
    FORMAT_SELECT: mocha
    LIFE_CYCLE_STAGE_SELECT: unittest
    ADDITIONAL_FORMAT_SELECT: istanbul
    ADDITIONAL_LIFE_CYCLE_STAGE_SELECT: code
    ADDITIONAL_LOG_FILE: ./tests/coverage/reports/coverage-summary.json
    LOG_FILE: ./mochatest.json
    COMMAND: |
      #!/bin/bash
      export PATH=/opt/IBM/node-v4.2/bin:$PATH
      npm install
      grunt dev-test-cov --no-color -f
  - name: Gate
    type: tester
    extension_id: ibm.devops.services.pipeline.dra_devops_gate
    CRITERIA: Weather Unit Test and Code Coverage Checks
    ENVIRONMENT: master
- name: DEV
  inputs:
  - type: job
    stage: BUILD
    job: Build
  triggers:
  - type: stage
  properties:
  - name: CF_APP_NAME
    value: undefined
    type: text
  - name: APP_URL
    value: undefined
    type: text
  - name: LOGICAL_APP_NAME
    value: ${CF_APP_NAME}
    type: text
  - name: LOGICAL_ENV_NAME
    value: dev
    type: text
  - name: BUILD_PREFIX
    value: master
    type: text
  jobs:
  - name: Blue/Green Deploy
    type: deployer
    target:
      region_id: ${DEV_REGION_ID}
      organization: ${DEV_ORG_NAME}
      space: ${DEV_SPACE_NAME}
      application: ${CF_APP_NAME}
    script: |
      #!/bin/bash
      export CF_APP_NAME="dev-$CF_APP"
      if ! cf app $CF_APP_NAME; then
        cf push "${CF_APP_NAME}" -n ${CF_APP_NAME}
      else
        OLD_CF_APP_NAME=${CF_APP_NAME}-OLD-$(date +"%s")
        rollback() {
          set +e
          if cf app $OLD_CF_APP_NAME; then
            cf logs $CF_APP_NAME --recent
            cf delete $CF_APP_NAME -f
            cf rename $OLD_CF_APP_NAME $CF_APP_NAME
          fi
          exit 1
        }
        set -e
        trap rollback ERR
        cf rename $CF_APP_NAME $OLD_CF_APP_NAME
        cf push $CF_APP_NAME
        cf delete $OLD_CF_APP_NAME -f
      fi      
      export APP_URL=http://$(cf app $CF_APP_NAME | grep urls: | awk '{print $2}')
      
